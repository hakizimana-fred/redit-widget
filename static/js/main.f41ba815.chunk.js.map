{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["renderPost","post","data","title","url","author","id","authorUrl","className","key","href","target","rel","nonStickiedOnly","stickied","App","subreddit","dataAttributes","useState","loading","setLoading","error","setError","setData","useEffect","fetch","then","response","json","children","slice","catch","e","console","log","length","filter","map","Boolean","window","location","hostname","match","document","querySelectorAll","forEach","Div","dataset","ReactDOM","render","StrictMode"],"mappings":"8PAIA,SAASA,EAAWC,GAAM,IAAD,EACsBA,EAArCC,KAAQC,EADO,EACPA,MAAOC,EADA,EACAA,IAAKC,EADL,EACKA,OAAQC,EADb,EACaA,GAC9BC,EAAS,mCAA+BF,GAE9C,OACE,yBAAKG,UAAU,sBAAsBC,IAAKH,GACxC,yBAAKE,UAAU,4BAAf,aACY,uBAAGE,KAAMH,EAAWC,UAAU,2BAA2BG,OAAO,SAASC,IAAI,uBAA7E,KAAsGP,IAElH,uBAAGK,KAAMN,EAAKI,UAAU,uBAAuBG,OAAO,SAASC,IAAI,uBAAuBT,IAKhG,SAASU,EAAgBZ,GACvB,OAAQA,EAAKC,KAAKY,SAqDLC,MAhDf,YAAgC,IACzBC,EADwB,EAAjBC,eAAiB,EAEAC,qBAFA,mBAEvBC,EAFuB,KAEdC,EAFc,OAGJF,mBAAS,IAHL,mBAGvBG,EAHuB,KAGhBC,EAHgB,OAINJ,mBAAS,IAJH,mBAIvBhB,EAJuB,KAIjBqB,EAJiB,KAwB7B,OAjBAC,qBAAU,WAERJ,GAAW,GACXK,MAAM,4BAAD,OAA6BT,EAA7B,UACFU,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACxB,GACLkB,GAAW,GACXG,EAAQrB,EAAKA,KAAK2B,SAASC,MAAM,EAAG,QAErCC,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZZ,GAAW,GACXE,EAAS,mCAEZ,CAAEN,IAIJ,yBAAKR,UAAU,sBACZ,wBAAIA,UAAU,yBAAd,mBACkB,uBAAGE,KAAI,+BAA0BM,GAAaJ,IAAI,uBAAlD,MAA4EI,IAE9F,yBAAKR,UAAU,wBACZW,GAAW,aACXE,GAASA,IACPnB,EAAKiC,QAAUjC,EAAKkC,OAAOvB,GAAiBwB,IAAIrC,IAErD,uBAAGQ,UAAU,6BAAb,4BAC4B,IAC1B,uBACEE,KAAK,6BACLE,IAAI,sBACJD,OAAO,UAHT,yBChDY2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVaC,SAASC,iBAAiB,kBAElCC,SAAQ,SAAAC,GACjB,IAAM7B,EAAiB6B,EAAIC,QAAQ/B,UACnCgC,IAASC,OAEP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAMjC,eAAiBA,KAEzB6B,Q","file":"static/js/main.f41ba815.chunk.js","sourcesContent":["import React , { useEffect, useState } from 'react';\nimport './App.css';\n\n// Render each post\nfunction renderPost(post){\n  const { data: { title, url, author, id } } = post\n  const authorUrl = `https://www.reddit.com/u/${author}`\n\n  return (\n    <div className=\"reddit_widget__post\" key={id}>\n      <div className=\"reddit_widget__posted_by\">\n        posted by <a href={authorUrl} className=\"reddit_widget__posted_by\" target=\"_blank\" rel=\"noopener noreferrer\">u/{author}</a>\n      </div>\n      <a href={url} className=\"reddit_widget__title\" target=\"_blank\" rel=\"noopener noreferrer\">{title}</a>\n    </div>\n  )\n}\n// Filter, since reddit always returns stickied posts up top\nfunction nonStickiedOnly(post){\n  return !post.data.stickied\n}\n\n\n\nfunction App({dataAttributes}) {\n const subreddit = dataAttributes\n const [loading, setLoading] = useState();\n const [error, setError] = useState('');\n const [data, setData] = useState([]);\n\n\n  useEffect(() => {\n    // Fetch data from reddit\n    setLoading(true)\n    fetch(`https://www.reddit.com/r/${subreddit}.json`)\n      .then((response) => response.json())\n      .then((data) => {\n        setLoading(false);\n        setData(data.data.children.slice(0, 10));\n      })\n      .catch((e) => {\n        console.log(e)\n        setLoading(false);\n        setError('error fetching from reddit');\n      });\n  }, [ subreddit ])\n\n\n  return (\n   <div className=\"reddit_widget__app\">\n      <h1 className=\"reddit_widget__header\">\n        Latest posts in <a href={`https://reddit.com/r/${subreddit}`} rel=\"noopener noreferrer\">/r/{subreddit}</a>\n      </h1>\n      <div className=\"reddit_widget__inner\">\n        {loading && \"Loading...\"}\n        {error && error}\n        {!!data.length && data.filter(nonStickiedOnly).map(renderPost)}\n      </div>\n      <p className=\"reddit_widget__powered_by\">\n        This widget is powered by{\" \"}\n        <a\n          href=\"https://javascriptpros.com\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          JavaScriptPros.com\n        </a>\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nconst WidgetDivs = document.querySelectorAll('.reddit_widget')\n\nWidgetDivs.forEach(Div => {\n  const dataAttributes = Div.dataset.subreddit\n  ReactDOM.render(\n    \n    <React.StrictMode>\n      <App  dataAttributes={ dataAttributes }/>\n    </React.StrictMode>,\n    Div\n  );\n})\n\n"],"sourceRoot":""}